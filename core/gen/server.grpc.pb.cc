// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: server.proto

#include "server.pb.h"
#include "server.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace JadeCore {

static const char* RpcBase_method_names[] = {
  "/JadeCore.RpcBase/Handle",
};

std::unique_ptr< RpcBase::Stub> RpcBase::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< RpcBase::Stub> stub(new RpcBase::Stub(channel));
  return stub;
}

RpcBase::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Handle_(RpcBase_method_names[0], ::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  {}

::grpc::ClientReaderWriter< ::JadeCore::CommandRequest, ::JadeCore::CommandResponse>* RpcBase::Stub::HandleRaw(::grpc::ClientContext* context) {
  return ::grpc_impl::internal::ClientReaderWriterFactory< ::JadeCore::CommandRequest, ::JadeCore::CommandResponse>::Create(channel_.get(), rpcmethod_Handle_, context);
}

void RpcBase::Stub::experimental_async::Handle(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::JadeCore::CommandRequest,::JadeCore::CommandResponse>* reactor) {
  ::grpc_impl::internal::ClientCallbackReaderWriterFactory< ::JadeCore::CommandRequest,::JadeCore::CommandResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_Handle_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::JadeCore::CommandRequest, ::JadeCore::CommandResponse>* RpcBase::Stub::AsyncHandleRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc_impl::internal::ClientAsyncReaderWriterFactory< ::JadeCore::CommandRequest, ::JadeCore::CommandResponse>::Create(channel_.get(), cq, rpcmethod_Handle_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::JadeCore::CommandRequest, ::JadeCore::CommandResponse>* RpcBase::Stub::PrepareAsyncHandleRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncReaderWriterFactory< ::JadeCore::CommandRequest, ::JadeCore::CommandResponse>::Create(channel_.get(), cq, rpcmethod_Handle_, context, false, nullptr);
}

RpcBase::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RpcBase_method_names[0],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< RpcBase::Service, ::JadeCore::CommandRequest, ::JadeCore::CommandResponse>(
          std::mem_fn(&RpcBase::Service::Handle), this)));
}

RpcBase::Service::~Service() {
}

::grpc::Status RpcBase::Service::Handle(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::JadeCore::CommandResponse, ::JadeCore::CommandRequest>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace JadeCore

